var search_data = {"index":{"searchIndex":["actionview","helpers","taghelper","application","object","ymdp","applicationview","assettaghelper","base","compiler","base","domains","options","template","base","coffeescript","javascript","view","yrb","configuration","base","config","servers","setter","formtaghelper","githelper","linktaghelper","view","[]()","add_content_variable()","add_path()","all_domains()","app_path()","assets_path()","base_filename()","base_filename()","base_path()","base_path()","build()","build?()","build_file()","cdata_section()","clean_domain()","clean_tmp_dir()","combo()","commit()","compile()","compress?()","config_path()","configuration()","configuration()","configure()","content_tag()","content_variables()","convert_filename()","copy_auth()","copy_config()","copy_config_files()","copy_images()","create_directory()","current_view()","current_view=()","current_view?()","destination()","destination_path()","destination_path()","directory()","display_path()","display_path()","do_commit()","each()","english_languages()","escape_once()","exists?()","file_not_found()","get_current_branch()","get_hash()","growl?()","image_tag()","images_path()","include_firebug_lite()","javascript_include()","jquery()","label()","layout?()","link_to()","link_to_function()","link_to_unless_current()","load_content_variables()","log()","new()","new()","new()","new()","new()","new()","new()","obfuscate?()","options()","parse()","partial?()","partial?()","password()","password_field()","paths()","process_all()","process_all_files()","process_all_translations()","process_coffee()","process_domains()","process_each_yrb()","process_haml()","process_path()","process_template()","process_template()","processed_template()","processed_template()","prototype()","render()","server_path()","servers()","servers()","servers_path()","servers_path()","set_content_variables()","supported_languages()","tag()","text_field()","to_hash()","to_json()","to_yaml()","username()","validate()","validate_embedded_js?()","validate_html?()","validate_js_assets?()","validate_json_assets?()","validator()","verbose()","verbose?()","verbose?()","write_template()","write_template()","write_template()","write_template()","write_template_with_layout()","write_template_without_layout()","yrb()","yrb_path()","license","readme"],"longSearchIndex":["actionview","actionview::helpers","actionview::helpers::taghelper","application","object","ymdp","ymdp::applicationview","ymdp::assettaghelper","ymdp::base","ymdp::compiler","ymdp::compiler::base","ymdp::compiler::domains","ymdp::compiler::options","ymdp::compiler::template","ymdp::compiler::template::base","ymdp::compiler::template::coffeescript","ymdp::compiler::template::javascript","ymdp::compiler::template::view","ymdp::compiler::template::yrb","ymdp::configuration","ymdp::configuration::base","ymdp::configuration::config","ymdp::configuration::servers","ymdp::configuration::setter","ymdp::formtaghelper","ymdp::githelper","ymdp::linktaghelper","ymdp::view","ymdp::configuration::base#[]()","ymdp::configuration::setter#add_content_variable()","ymdp::configuration::setter#add_path()","ymdp::compiler::domains#all_domains()","ymdp::compiler::base#app_path()","ymdp::compiler::base#assets_path()","ymdp::compiler::template::base#base_filename()","ymdp::compiler::template::view#base_filename()","ymdp::base#base_path()","ymdp::base::base_path()","ymdp::compiler::template::base#build()","ymdp::compiler::base#build?()","ymdp::compiler::base#build_file()","actionview::helpers::taghelper#cdata_section()","ymdp::compiler::base#clean_domain()","ymdp::compiler::domains#clean_tmp_dir()","ymdp::applicationview#combo()","ymdp::compiler::domains#commit()","ymdp::compiler::domains#compile()","ymdp::configuration::config#compress?()","ymdp::compiler::base#config_path()","ymdp::base::configuration()","ymdp::base#configuration()","ymdp::base::configure()","actionview::helpers::taghelper#content_tag()","ymdp::base#content_variables()","ymdp::compiler::template::view#convert_filename()","ymdp::compiler::base#copy_auth()","ymdp::compiler::base#copy_config()","ymdp::compiler::base#copy_config_files()","ymdp::compiler::base#copy_images()","ymdp::compiler::base#create_directory()","application::current_view()","application::current_view=()","application::current_view?()","ymdp::compiler::base#destination()","ymdp::compiler::template::base#destination_path()","ymdp::compiler::template::yrb#destination_path()","ymdp::compiler::template::yrb#directory()","ymdp::base#display_path()","ymdp::base::display_path()","ymdp::githelper#do_commit()","ymdp::configuration::base#each()","ymdp::applicationview#english_languages()","actionview::helpers::taghelper#escape_once()","ymdp::configuration::base#exists?()","ymdp::configuration::base#file_not_found()","ymdp::githelper#get_current_branch()","ymdp::githelper#get_hash()","ymdp::configuration::config#growl?()","ymdp::assettaghelper#image_tag()","ymdp::compiler::base#images_path()","ymdp::applicationview#include_firebug_lite()","ymdp::applicationview#javascript_include()","ymdp::configuration::setter#jquery()","ymdp::formtaghelper#label()","ymdp::compiler::base#layout?()","ymdp::linktaghelper#link_to()","ymdp::linktaghelper#link_to_function()","ymdp::linktaghelper#link_to_unless_current()","ymdp::configuration::setter#load_content_variables()","ymdp::compiler::base#log()","ymdp::compiler::base::new()","ymdp::compiler::domains::new()","ymdp::compiler::template::base::new()","ymdp::configuration::base::new()","ymdp::configuration::config::new()","ymdp::configuration::servers::new()","ymdp::view::new()","ymdp::configuration::config#obfuscate?()","ymdp::configuration::base#options()","ymdp::compiler::options::parse()","ymdp::compiler::base#partial?()","ymdp::compiler::template::base#partial?()","ymdp::configuration::config#password()","ymdp::formtaghelper#password_field()","ymdp::base#paths()","ymdp::compiler::base#process_all()","ymdp::compiler::base#process_all_files()","ymdp::compiler::base#process_all_translations()","ymdp::compiler::template::view#process_coffee()","ymdp::compiler::domains#process_domains()","ymdp::compiler::base#process_each_yrb()","ymdp::compiler::template::view#process_haml()","ymdp::compiler::base#process_path()","ymdp::compiler::template::base#process_template()","ymdp::compiler::template::view#process_template()","ymdp::compiler::template::base#processed_template()","ymdp::compiler::template::yrb#processed_template()","ymdp::configuration::setter#prototype()","ymdp::applicationview#render()","ymdp::compiler::template::base#server_path()","ymdp::base#servers()","ymdp::configuration::servers#servers()","ymdp::compiler::base#servers_path()","ymdp::compiler::template::base#servers_path()","ymdp::compiler::template::base#set_content_variables()","ymdp::applicationview#supported_languages()","actionview::helpers::taghelper#tag()","ymdp::formtaghelper#text_field()","ymdp::compiler::template::yrb#to_hash()","ymdp::compiler::template::yrb#to_json()","ymdp::compiler::template::yrb#to_yaml()","ymdp::configuration::config#username()","ymdp::compiler::template::yrb#validate()","ymdp::configuration::config#validate_embedded_js?()","ymdp::configuration::config#validate_html?()","ymdp::configuration::config#validate_js_assets?()","ymdp::configuration::config#validate_json_assets?()","ymdp::compiler::template::view#validator()","ymdp::compiler::template::base#verbose()","ymdp::compiler::template::base#verbose?()","ymdp::configuration::config#verbose?()","ymdp::compiler::template::base#write_template()","ymdp::compiler::template::coffeescript#write_template()","ymdp::compiler::template::javascript#write_template()","ymdp::compiler::template::view#write_template()","ymdp::compiler::template::base#write_template_with_layout()","ymdp::compiler::template::base#write_template_without_layout()","ymdp::compiler::template::yrb#yrb()","ymdp::compiler::base#yrb_path()","",""],"info":[["ActionView","","ActionView.html","",""],["ActionView::Helpers","","ActionView/Helpers.html","",""],["ActionView::Helpers::TagHelper","","ActionView/Helpers/TagHelper.html","","<p>Provides methods to generate HTML tags programmatically when you can’t\nuse a Builder. By default, they …\n"],["Application","","Application.html","","<p>Provides an interface for helper methods to know which view is being\nrendered so they can branch conditionally. …\n"],["Object","","Object.html","",""],["YMDP","","YMDP.html","","<p>Compiles the source code for an individual domain.\n<p>Examples\n\n<pre>@compiler = YMDP::Compiler::Base.new('staging', ...</pre>\n"],["YMDP::ApplicationView","","YMDP/ApplicationView.html","","<p>Contains all the functions which are available from inside a view file,\nwhether that view is HTML, JavaScript …\n"],["YMDP::AssetTagHelper","","YMDP/AssetTagHelper.html","",""],["YMDP::Base","","YMDP/Base.html","","<p>Defines the global configuration options for all YMDP classes.  This is the\nclass that knows about local …\n"],["YMDP::Compiler","","YMDP/Compiler.html","",""],["YMDP::Compiler::Base","","YMDP/Compiler/Base.html","",""],["YMDP::Compiler::Domains","","YMDP/Compiler/Domains.html","","<p>Covers all the domains and the actions that are taken on all domains at\nonce.\n"],["YMDP::Compiler::Options","","YMDP/Compiler/Options.html","","<p>Command-line options processor for Compiler module.\n"],["YMDP::Compiler::Template","","YMDP/Compiler/Template.html","",""],["YMDP::Compiler::Template::Base","","YMDP/Compiler/Template/Base.html","","<p>Process source files into usable code.\n<p>Source files can be HTML, Haml, ERB, JavaScript, or CSS files. …\n"],["YMDP::Compiler::Template::CoffeeScript","","YMDP/Compiler/Template/CoffeeScript.html","",""],["YMDP::Compiler::Template::JavaScript","","YMDP/Compiler/Template/JavaScript.html","","<p>Process templates for JavaScript files.\n<p>JavaScript files support ERB tags.\n"],["YMDP::Compiler::Template::View","","YMDP/Compiler/Template/View.html","",""],["YMDP::Compiler::Template::YRB","","YMDP/Compiler/Template/YRB.html","","<p>Process Yahoo! Resource Bundle format translation files.\n<p>Convert them to a hash and write the hash to …\n"],["YMDP::Configuration","","YMDP/Configuration.html","",""],["YMDP::Configuration::Base","","YMDP/Configuration/Base.html","",""],["YMDP::Configuration::Config","","YMDP/Configuration/Config.html","",""],["YMDP::Configuration::Servers","","YMDP/Configuration/Servers.html","",""],["YMDP::Configuration::Setter","","YMDP/Configuration/Setter.html","","<p>Provides an interface to set global configuration variables inside a block.\n<p>Used by the YMDP::Base <code>configure</code> …\n"],["YMDP::FormTagHelper","","YMDP/FormTagHelper.html","",""],["YMDP::GitHelper","","YMDP/GitHelper.html","",""],["YMDP::LinkTagHelper","","YMDP/LinkTagHelper.html","",""],["YMDP::View","","YMDP/View.html","",""],["[]","YMDP::Configuration::Base","YMDP/Configuration/Base.html#method-i-5B-5D","(key)",""],["add_content_variable","YMDP::Configuration::Setter","YMDP/Configuration/Setter.html#method-i-add_content_variable","(name, value)","<p>Adds an entry to the <code>content_variables</code> hash.\n"],["add_path","YMDP::Configuration::Setter","YMDP/Configuration/Setter.html#method-i-add_path","(name, value)","<p>Adds an entry to the <code>paths</code> hash.\n"],["all_domains","YMDP::Compiler::Domains","YMDP/Compiler/Domains.html#method-i-all_domains","()","<p>Returns all domains.\n"],["app_path","YMDP::Compiler::Base","YMDP/Compiler/Base.html#method-i-app_path","()",""],["assets_path","YMDP::Compiler::Base","YMDP/Compiler/Base.html#method-i-assets_path","()",""],["base_filename","YMDP::Compiler::Template::Base","YMDP/Compiler/Template/Base.html#method-i-base_filename","(filename)",""],["base_filename","YMDP::Compiler::Template::View","YMDP/Compiler/Template/View.html#method-i-base_filename","(filename)","<p>Filename without its extension:\n<p>“authorize.html.haml” becomes “authorize”\n\n"],["base_path","YMDP::Base","YMDP/Base.html#method-i-base_path","()",""],["base_path","YMDP::Base","YMDP/Base.html#method-c-base_path","()",""],["build","YMDP::Compiler::Template::Base","YMDP/Compiler/Template/Base.html#method-i-build","()","<p>Compile this view unless it is a partial.\n"],["build?","YMDP::Compiler::Base","YMDP/Compiler/Base.html#method-i-build-3F","(file)","<p>Build if it’s not a partial and not a layout.\n"],["build_file","YMDP::Compiler::Base","YMDP/Compiler/Base.html#method-i-build_file","(file)","<p>Build this file if it’s either:\n<p>a view, but not a partial or layout, or\n<p>a JavaScript file.\n"],["cdata_section","ActionView::Helpers::TagHelper","ActionView/Helpers/TagHelper.html#method-i-cdata_section","(content)","<p>Returns a CDATA section with the given <code>content</code>.  CDATA\nsections are used to escape blocks of text containing …\n"],["clean_domain","YMDP::Compiler::Base","YMDP/Compiler/Base.html#method-i-clean_domain","()","<p>Creates a fresh destination directory structure for the code to be compiled\ninto.\n"],["clean_tmp_dir","YMDP::Compiler::Domains","YMDP/Compiler/Domains.html#method-i-clean_tmp_dir","()","<p>Perform a block, starting with a clean ‘tmp’ directory and ending with\none.\n"],["combo","YMDP::ApplicationView","YMDP/ApplicationView.html#method-i-combo","(filenames, options={})",""],["commit","YMDP::Compiler::Domains","YMDP/Compiler/Domains.html#method-i-commit","()","<p>Commit to git and store the hash of the commit.\n"],["compile","YMDP::Compiler::Domains","YMDP/Compiler/Domains.html#method-i-compile","()","<p>Compile the source code for all domains into their usable destination\nfiles.\n"],["compress?","YMDP::Configuration::Config","YMDP/Configuration/Config.html#method-i-compress-3F","()",""],["config_path","YMDP::Compiler::Base","YMDP/Compiler/Base.html#method-i-config_path","()",""],["configuration","YMDP::Base","YMDP/Base.html#method-c-configuration","()",""],["configuration","YMDP::Base","YMDP/Base.html#method-i-configuration","()",""],["configure","YMDP::Base","YMDP/Base.html#method-c-configure","()","<p>Configures global YMDP settings. Sends a YMDP::Configuration::Setter\ninstance to the block, which is …\n"],["content_tag","ActionView::Helpers::TagHelper","ActionView/Helpers/TagHelper.html#method-i-content_tag","(name, content_or_options_with_block = nil, options = nil, escape = true, &block)","<p>Returns an HTML block tag of type <code>name</code> surrounding the\n<code>content</code>. Add HTML attributes by passing an attributes …\n"],["content_variables","YMDP::Base","YMDP/Base.html#method-i-content_variables","()",""],["convert_filename","YMDP::Compiler::Template::View","YMDP/Compiler/Template/View.html#method-i-convert_filename","(filename)","<p>Filename without its extension:\n<p>“authorize.html.haml” becomes “authorize”\n\n"],["copy_auth","YMDP::Compiler::Base","YMDP/Compiler/Base.html#method-i-copy_auth","()",""],["copy_config","YMDP::Compiler::Base","YMDP/Compiler/Base.html#method-i-copy_config","()",""],["copy_config_files","YMDP::Compiler::Base","YMDP/Compiler/Base.html#method-i-copy_config_files","()","<p>Copy the appropriate version of the configuration files (config.xml,\nauth.xml) into the compiled source …\n"],["copy_images","YMDP::Compiler::Base","YMDP/Compiler/Base.html#method-i-copy_images","()","<p>Images don’t require any processing, just copy them over into this\ndomain’s assets directory.\n"],["create_directory","YMDP::Compiler::Base","YMDP/Compiler/Base.html#method-i-create_directory","(path)","<p>If this directory doesn’t exist, create it and print that it’s being\ncreated.\n"],["current_view","Application","Application.html#method-c-current_view","()","<p>Returns the name of the current view.\n"],["current_view=","Application","Application.html#method-c-current_view-3D","(view)","<p>Sets the name of the current view.\n"],["current_view?","Application","Application.html#method-c-current_view-3F","(view)","<p>Returns true if <code>view</code> is the current view which is being\nrendered.\n"],["destination","YMDP::Compiler::Base","YMDP/Compiler/Base.html#method-i-destination","(path)","<p>Convert a file’s path from its source to its destination.\n<p>The source directory is in the ‘app’ directory. …\n"],["destination_path","YMDP::Compiler::Template::Base","YMDP/Compiler/Template/Base.html#method-i-destination_path","()","<p>Produces the destination path of this template, in the servers directory\nfor the given domain.\n<p>Examples …\n"],["destination_path","YMDP::Compiler::Template::YRB","YMDP/Compiler/Template/YRB.html#method-i-destination_path","()","<p>The destination of the compiled JSON file.\n"],["directory","YMDP::Compiler::Template::YRB","YMDP/Compiler/Template/YRB.html#method-i-directory","()","<p>Base directory for translations for this domain.\n"],["display_path","YMDP::Base","YMDP/Base.html#method-i-display_path","(path)",""],["display_path","YMDP::Base","YMDP/Base.html#method-c-display_path","(path)","<p>Parses out the <code>base_path</code> setting from a path to display it in\na less verbose way.\n"],["do_commit","YMDP::GitHelper","YMDP/GitHelper.html#method-i-do_commit","(message)",""],["each","YMDP::Configuration::Base","YMDP/Configuration/Base.html#method-i-each","()",""],["english_languages","YMDP::ApplicationView","YMDP/ApplicationView.html#method-i-english_languages","()","<p>Returns an array of country codes of English-speaking countries supported\nby the application, based on …\n"],["escape_once","ActionView::Helpers::TagHelper","ActionView/Helpers/TagHelper.html#method-i-escape_once","(html)","<p>Returns an escaped version of <code>html</code> without affecting existing\nescaped entities.\n<p>Examples\n\n<pre>escape_once(&quot;1 ...</pre>\n"],["exists?","YMDP::Configuration::Base","YMDP/Configuration/Base.html#method-i-exists-3F","(*args)",""],["file_not_found","YMDP::Configuration::Base","YMDP/Configuration/Base.html#method-i-file_not_found","(filename)",""],["get_current_branch","YMDP::GitHelper","YMDP/GitHelper.html#method-i-get_current_branch","()",""],["get_hash","YMDP::GitHelper","YMDP/GitHelper.html#method-i-get_hash","(branch)",""],["growl?","YMDP::Configuration::Config","YMDP/Configuration/Config.html#method-i-growl-3F","()",""],["image_tag","YMDP::AssetTagHelper","YMDP/AssetTagHelper.html#method-i-image_tag","(source, options = {})",""],["images_path","YMDP::Compiler::Base","YMDP/Compiler/Base.html#method-i-images_path","()",""],["include_firebug_lite","YMDP::ApplicationView","YMDP/ApplicationView.html#method-i-include_firebug_lite","()","<p>Renders a link to include Firebug Lite for debugging JavaScript in Internet\nExplorer.\n"],["javascript_include","YMDP::ApplicationView","YMDP/ApplicationView.html#method-i-javascript_include","(filename, options={})","<p>Includes a JavaScript file in a view.  If the filename is a full path, the \nJavaScript file will be linked …\n"],["jquery","YMDP::Configuration::Setter","YMDP/Configuration/Setter.html#method-i-jquery","()",""],["label","YMDP::FormTagHelper","YMDP/FormTagHelper.html#method-i-label","(name, content_or_options = nil, options = {})",""],["layout?","YMDP::Compiler::Base","YMDP/Compiler/Base.html#method-i-layout-3F","(file)","<p>A file in the layouts directory is a layout.\n"],["link_to","YMDP::LinkTagHelper","YMDP/LinkTagHelper.html#method-i-link_to","(text, url_or_view, options={})",""],["link_to_function","YMDP::LinkTagHelper","YMDP/LinkTagHelper.html#method-i-link_to_function","(text, function, options={})",""],["link_to_unless_current","YMDP::LinkTagHelper","YMDP/LinkTagHelper.html#method-i-link_to_unless_current","(text, url_or_view, options={})",""],["load_content_variables","YMDP::Configuration::Setter","YMDP/Configuration/Setter.html#method-i-load_content_variables","(filename)","<p>Loads the <code>content_variables</code> hash from a Yaml file.\n"],["log","YMDP::Compiler::Base","YMDP/Compiler/Base.html#method-i-log","(text)","<p>Format text in a standard way for output to the screen.\n"],["new","YMDP::Compiler::Base","YMDP/Compiler/Base.html#method-c-new","(domain, git_hash, options={})","<p>A TemplateCompiler instance covers a single domain, handling all the\nprocessing necessary to  convert …\n"],["new","YMDP::Compiler::Domains","YMDP/Compiler/Domains.html#method-c-new","(options=nil)",""],["new","YMDP::Compiler::Template::Base","YMDP/Compiler/Template/Base.html#method-c-new","(params)",""],["new","YMDP::Configuration::Base","YMDP/Configuration/Base.html#method-c-new","(filename, base)",""],["new","YMDP::Configuration::Config","YMDP/Configuration/Config.html#method-c-new","()",""],["new","YMDP::Configuration::Servers","YMDP/Configuration/Servers.html#method-c-new","()",""],["new","YMDP::View","YMDP/View.html#method-c-new","(assets_directory)",""],["obfuscate?","YMDP::Configuration::Config","YMDP/Configuration/Config.html#method-i-obfuscate-3F","()",""],["options","YMDP::Configuration::Base","YMDP/Configuration/Base.html#method-i-options","(*args)",""],["parse","YMDP::Compiler::Options","YMDP/Compiler/Options.html#method-c-parse","()","<p>Parse command line options into an options hash.\n"],["partial?","YMDP::Compiler::Base","YMDP/Compiler/Base.html#method-i-partial-3F","(file)","<p>A filename beginning with an underscore is a partial.\n"],["partial?","YMDP::Compiler::Template::Base","YMDP/Compiler/Template/Base.html#method-i-partial-3F","()","<p>If the filename begins with a <code>_</code> it’s a partial.\n"],["password","YMDP::Configuration::Config","YMDP/Configuration/Config.html#method-i-password","()",""],["password_field","YMDP::FormTagHelper","YMDP/FormTagHelper.html#method-i-password_field","(name, options={})",""],["paths","YMDP::Base","YMDP/Base.html#method-i-paths","()","<p>Returns the paths definition hash as an instance variable, making it\navailable to  instances of any class …\n"],["process_all","YMDP::Compiler::Base","YMDP/Compiler/Base.html#method-i-process_all","()","<p>Perform all the processing for a single domain.\n<p>This is the main method on this object.\n"],["process_all_files","YMDP::Compiler::Base","YMDP/Compiler/Base.html#method-i-process_all_files","(path)","<p>Process all code files (HTML and JavaScript) into usable, complete HTML\nfiles.\n"],["process_all_translations","YMDP::Compiler::Base","YMDP/Compiler/Base.html#method-i-process_all_translations","()","<p>Convert all YRB translation files from YRB “.pres” format into a single\nJSON file per language. …\n"],["process_coffee","YMDP::Compiler::Template::View","YMDP/Compiler/Template/View.html#method-i-process_coffee","(template, filename=nil)",""],["process_domains","YMDP::Compiler::Domains","YMDP/Compiler/Domains.html#method-i-process_domains","()","<p>Process source code for each domain in turn.\n"],["process_each_yrb","YMDP::Compiler::Base","YMDP/Compiler/Base.html#method-i-process_each_yrb","(lang)","<p>Convert the YRB translation files of a single language for this domain into\na single JSON file.\n"],["process_haml","YMDP::Compiler::Template::View","YMDP/Compiler/Template/View.html#method-i-process_haml","(template, filename=nil)","<p>Process this template with Haml.\n"],["process_path","YMDP::Compiler::Base","YMDP/Compiler/Base.html#method-i-process_path","(path)","<p>Do all the processing necessary to convert all the application source code\nfrom the given path into usable …\n"],["process_template","YMDP::Compiler::Template::Base","YMDP/Compiler/Template/Base.html#method-i-process_template","(template)","<p>Implemented in child classes, this defines what must be done to process a\ntemplate.\n"],["process_template","YMDP::Compiler::Template::View","YMDP/Compiler/Template/View.html#method-i-process_template","(template)","<p>Process this template with ERB.\n"],["processed_template","YMDP::Compiler::Template::Base","YMDP/Compiler/Template/Base.html#method-i-processed_template","()","<p>Returns the compiled template code after its Haml or ERB has been\nprocessed.\n"],["processed_template","YMDP::Compiler::Template::YRB","YMDP/Compiler/Template/YRB.html#method-i-processed_template","()","<p>This function is the file which is written to the destination–in this\ncase, the JSON file.\n"],["prototype","YMDP::Configuration::Setter","YMDP/Configuration/Setter.html#method-i-prototype","()",""],["render","YMDP::ApplicationView","YMDP/ApplicationView.html#method-i-render","(params)","<p>Renders a partial into the current view. HTML partial names must be\npreceded with an underscore.\n<p>Rendering …\n"],["server_path","YMDP::Compiler::Template::Base","YMDP/Compiler/Template/Base.html#method-i-server_path","()","<p>Path to the servers directory for the current domain.\n"],["servers","YMDP::Base","YMDP/Base.html#method-i-servers","()","<p>Returns the server definition hash as an instance variable, making it\navailable to instances of any class …\n"],["servers","YMDP::Configuration::Servers","YMDP/Configuration/Servers.html#method-i-servers","()",""],["servers_path","YMDP::Compiler::Base","YMDP/Compiler/Base.html#method-i-servers_path","()",""],["servers_path","YMDP::Compiler::Template::Base","YMDP/Compiler/Template/Base.html#method-i-servers_path","()",""],["set_content_variables","YMDP::Compiler::Template::Base","YMDP/Compiler/Template/Base.html#method-i-set_content_variables","()","<p>Parsed from the file ‘content.yml’ each of its keys is added to the\nenvironment as an instance variable, …\n"],["supported_languages","YMDP::ApplicationView","YMDP/ApplicationView.html#method-i-supported_languages","()","<p>Returns an array of the country codes of all languages supported by the\napplication,  which is determined …\n"],["tag","ActionView::Helpers::TagHelper","ActionView/Helpers/TagHelper.html#method-i-tag","(name, options = nil, open = false, escape = true)","<p>Returns an empty HTML tag of type <code>name</code> which by default is\nXHTML compliant. Set <code>open</code> to true to create …\n"],["text_field","YMDP::FormTagHelper","YMDP/FormTagHelper.html#method-i-text_field","(name, options={})",""],["to_hash","YMDP::Compiler::Template::YRB","YMDP/Compiler/Template/YRB.html#method-i-to_hash","()","<p>Turn it back into a hash.\n"],["to_json","YMDP::Compiler::Template::YRB","YMDP/Compiler/Template/YRB.html#method-i-to_json","()","<p>JSON values of the compiled translations.\n"],["to_yaml","YMDP::Compiler::Template::YRB","YMDP/Compiler/Template/YRB.html#method-i-to_yaml","()","<p>Convert the hash to Yaml if you should want to do that.\n"],["username","YMDP::Configuration::Config","YMDP/Configuration/Config.html#method-i-username","()",""],["validate","YMDP::Compiler::Template::YRB","YMDP/Compiler/Template/YRB.html#method-i-validate","()","<p>Validate the JSON file.\n"],["validate_embedded_js?","YMDP::Configuration::Config","YMDP/Configuration/Config.html#method-i-validate_embedded_js-3F","()",""],["validate_html?","YMDP::Configuration::Config","YMDP/Configuration/Config.html#method-i-validate_html-3F","()",""],["validate_js_assets?","YMDP::Configuration::Config","YMDP/Configuration/Config.html#method-i-validate_js_assets-3F","()",""],["validate_json_assets?","YMDP::Configuration::Config","YMDP/Configuration/Config.html#method-i-validate_json_assets-3F","()",""],["validator","YMDP::Compiler::Template::View","YMDP/Compiler/Template/View.html#method-i-validator","()",""],["verbose","YMDP::Compiler::Template::Base","YMDP/Compiler/Template/Base.html#method-i-verbose","(message)","<p>Outputs a message if @verbose is on.\n"],["verbose?","YMDP::Compiler::Template::Base","YMDP/Compiler/Template/Base.html#method-i-verbose-3F","()","<p>Is the verbose setting on?\n"],["verbose?","YMDP::Configuration::Config","YMDP/Configuration/Config.html#method-i-verbose-3F","()",""],["write_template","YMDP::Compiler::Template::Base","YMDP/Compiler/Template/Base.html#method-i-write_template","(result)","<p>Write this processed template to its destination file.\n<p>Overwrite this method in child class to define …\n"],["write_template","YMDP::Compiler::Template::CoffeeScript","YMDP/Compiler/Template/CoffeeScript.html#method-i-write_template","(result)","<p>Compile CoffeeScript into JavaScript and write it\n"],["write_template","YMDP::Compiler::Template::JavaScript","YMDP/Compiler/Template/JavaScript.html#method-i-write_template","(result)","<p>Write the processed template without any layout.\n<p>Run the JavaScript compressor on the file if that option …\n"],["write_template","YMDP::Compiler::Template::View","YMDP/Compiler/Template/View.html#method-i-write_template","(result)","<p>Write this template with the application layout applied.\n<p>Validate the resulting HTML file if that option …\n"],["write_template_with_layout","YMDP::Compiler::Template::Base","YMDP/Compiler/Template/Base.html#method-i-write_template_with_layout","(result)","<p>Writes the input string to the destination file, passing it through the\napplication template.\n<p>The application …\n"],["write_template_without_layout","YMDP::Compiler::Template::Base","YMDP/Compiler/Template/Base.html#method-i-write_template_without_layout","(result)","<p>Writes the input string to the destination file without adding any layout.\n"],["yrb","YMDP::Compiler::Template::YRB","YMDP/Compiler/Template/YRB.html#method-i-yrb","()","<p>Parse YRB file\n"],["yrb_path","YMDP::Compiler::Base","YMDP/Compiler/Base.html#method-i-yrb_path","()",""],["LICENSE","","LICENSE.html","","<p>Copyright © 2010 Capital Thought\n<p>Permission is hereby granted, free of charge, to any person obtaining …\n"],["README","","README_rdoc.html","","<p>ymdp\n<p>Framework for developing applications in the Yahoo! Mail Development\nPlatform.\n<p>Copyright\n"]]}}